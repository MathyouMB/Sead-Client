{"version":3,"sources":["apicalls.js","components/LoginPage.jsx","components/Note.jsx","components/NotesPage.jsx","components/ReadPage.jsx","components/CreateNotePage.jsx","components/Header.jsx","App.jsx","index.jsx"],"names":["gql","USER","NOTE","LOGIN","CREATENOTE","LoginPage","props","text","useState","email","setEmail","password","setPassword","errorDialog","setErrorDialog","httpLink","createHttpLink","uri","headers","client","ApolloClient","link","cache","InMemoryCache","login","a","query","variables","data","loginCheckAndSuccessful","console","log","id","setUserID","userID","to","renderRedirect","className","type","placeholder","value","onChange","event","target","onClick","Note","title","length","slice","NotesPage","notes","setNotes","loading","setLoading","queryData","user","useEffect","map","ele","ReadPage","index","setIndex","setNote","parsedText","setParsedText","urlParams","URLSearchParams","window","location","search","get","note","parseText","split","CreateNotePage","setTitle","setText","redirect","setRediret","createNote","mutate","mutation","errorDialogRender","Header","src","App","setId","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.04b5a62d.chunk.js","sourcesContent":["import { gql } from \"apollo-boost\";\r\nexport const USERS = gql`\r\n{\r\n    users{\r\n      id\r\n      username\r\n      email\r\n      notes{\r\n        id\r\n        title\r\n        text\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const USER = gql`\r\nquery user($id: ID!){\r\n  user(id: $id) {\r\n    id\r\n    username\r\n    email\r\n    notes{\r\n      id\r\n      title\r\n      text\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport const NOTE = gql`\r\nquery note($id: ID!){\r\n  note(id: $id) {\r\n    id\r\n    title\r\n    text\r\n  }\r\n}\r\n`;\r\n\r\nexport const LOGIN = gql`\r\nquery login($email: String!, $password: String!){\r\n  login(email: $email, password: $password) {\r\n    id\r\n    username\r\n    email\r\n    notes{\r\n      id\r\n      title\r\n      text\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport const CREATENOTE = gql`\r\nmutation($userId: ID!, $title: String!, $text: String!){\r\n  createNote(\r\n    userId: $userId\r\n    title: $title,\r\n    text: $text\r\n  ){\r\n    id\r\n    title\r\n    text\r\n  }\r\n}\r\n`;","import React, { useState, useEffect } from 'react';\r\nimport { ApolloClient } from 'apollo-client'\r\nimport { createHttpLink } from 'apollo-link-http'\r\nimport { InMemoryCache } from 'apollo-cache-inmemory'\r\nimport {LOGIN} from '../apicalls'\r\nimport { Link , Redirect} from \"react-router-dom\";\r\nimport '../style/LoginPage.scss';\r\nconst LoginPage = (props) => {\r\n\r\n    let [email, setEmail] = useState(\"\");\r\n    let [password, setPassword] = useState(\"\");\r\n    let [errorDialog, setErrorDialog] = useState(false);\r\n\r\n    const httpLink = createHttpLink({\r\n        uri: 'https://sead-rails.herokuapp.com/graphql',\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        }\r\n    })\r\n\r\n    const client = new ApolloClient({\r\n        link: httpLink,\r\n        cache: new InMemoryCache()\r\n    })\r\n    \r\n    const login = async () =>{\r\n        if ((email == \"\") || (password == \"\")) {\r\n            setErrorDialog(true);\r\n          } else {\r\n            let data = await client\r\n              .query({\r\n                query: LOGIN,\r\n                variables: {\r\n                  \"email\": email,\r\n                  \"password\": password\r\n                }\r\n              });\r\n            loginCheckAndSuccessful(data)\r\n          }   \r\n    }\r\n\r\n    const loginCheckAndSuccessful = async (data) => {\r\n        const { login } = data.data;\r\n        if (login !== null) {\r\n          console.log(data.data.login.id)\r\n          props.setUserID(login.id)\r\n        } else {\r\n          setPassword('')\r\n          setErrorDialog(true);\r\n        }\r\n      }\r\n\r\n    const renderRedirect = () => {\r\n        console.log(props.id)\r\n        if (props.userID != -1) {\r\n            return (<Redirect to='/notes' />)\r\n        }\r\n    }\r\n\r\n    const updateEmail = (event) => {\r\n        setEmail(event.target.value);\r\n    }\r\n\r\n    const updatePassword = (event) => {\r\n        setPassword(event.target.value);\r\n    }\r\n\r\n    const clickLogin = () => {\r\n        console.log(email);\r\n        console.log(password);\r\n        login();\r\n    }\r\n\r\n    const errorDialogRender = (text) => {\r\n    if (errorDialog) {\r\n        return (\r\n        <div className=\"error-dialog\">\r\n            <p>{text}</p>\r\n        </div>\r\n        )\r\n    } else {\r\n        return (\r\n        <></>\r\n        )\r\n    }\r\n    }\r\n\r\n  return (\r\n    <>\r\n    {renderRedirect()}\r\n    <div className=\"login-page\">\r\n        <div className=\"login-page-container\">\r\n            <div className=\"login-page-container-inner\">\r\n                <input className=\"login-page-input\" type=\"text\" placeholder=\"Email\" value={email} onChange={updateEmail}></input>\r\n                <input className=\"login-page-input\" type=\"text\" placeholder=\"Password\" value={password} onChange={updatePassword} ></input>{/*type=\"password\"*/}\r\n                <input className=\"login-page-button\" type=\"button\" value=\"Login\" onClick={clickLogin}></input>\r\n                \r\n            </div>  \r\n        </div>\r\n    </div>\r\n    {errorDialogRender('Invalid Login')}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default LoginPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport '../style/Note.scss';\r\n\r\n\r\nconst Note = (props) => {\r\n\r\n  const cutShortText = (text) =>{\r\n      if(text.length>310){\r\n        return text.slice(0, 310)+\"...\";\r\n      }else{\r\n        return(text)\r\n      }\r\n     \r\n  }  \r\n\r\n  return (\r\n    <div className=\"note hvr-float\">\r\n       \r\n        <div className=\"note-container\">\r\n            <span className=\"note-title\"><h1>{props.title}</h1></span>\r\n            <p className=\"note-paragraph\">{cutShortText(props.text)}</p>\r\n            <Link to={'/read?id=' + props.id}><input className=\"note-button\" type=\"button\" value=\"Read\"></input></Link>\r\n        </div>\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Note;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { ApolloClient } from 'apollo-client'\r\nimport { createHttpLink } from 'apollo-link-http'\r\nimport { InMemoryCache } from 'apollo-cache-inmemory'\r\nimport {USER} from '../apicalls'\r\nimport Note from './Note'\r\nimport { Link } from \"react-router-dom\";\r\nimport '../style/NotesPage.scss';\r\n\r\nconst NotesPage = (props) => {\r\n\r\n    let [notes, setNotes] = useState(\"\");\r\n    let [loading,setLoading] = useState(true);\r\n\r\n    const httpLink = createHttpLink({\r\n        uri: 'https://sead-rails.herokuapp.com/graphql',\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        }\r\n    })\r\n\r\n    const client = new ApolloClient({\r\n        link: httpLink,\r\n        cache: new InMemoryCache()\r\n    })\r\n\r\n    const queryData = async () =>{\r\n\r\n        let data = await client\r\n            .query({\r\n                query: USER,\r\n                variables: {\r\n                    \"id\": props.userID\r\n                  }\r\n            });\r\n        console.log(data);\r\n        console.log(data.data.user.notes)\r\n        setNotes(data.data.user.notes);\r\n        setLoading(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(loading && props.userID != -1){\r\n            queryData();\r\n        }  \r\n    })\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n    <div className=\"notes-page\">\r\n       <div className=\"note-wrapper\">\r\n            {loading ? \r\n                \"Loading...\"\r\n                : \r\n                notes.map((ele) => <Note id={ele.id} title={ele.title} text={ele.text}/>)\r\n            }\r\n            <Link to={'/create/'}><input className=\"note-page-button\" type=\"button\" value=\"Add Note\"></input></Link>\r\n    \r\n       </div>\r\n    </div>\r\n    \r\n    </>\r\n  );\r\n}\r\n\r\nexport default NotesPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { ApolloClient } from 'apollo-client'\r\nimport { createHttpLink } from 'apollo-link-http'\r\nimport { InMemoryCache } from 'apollo-cache-inmemory'\r\nimport {NOTE} from '../apicalls'\r\nimport '../style/ReadPage.scss';\r\n\r\n\r\nconst ReadPage = (props) => {\r\n    let [index, setIndex] = useState(0);\r\n    let [note, setNote] = useState(\"\");\r\n    let [parsedText, setParsedText] = useState([]);\r\n    let [loading,setLoading] = useState(true);\r\n\r\n    const httpLink = createHttpLink({\r\n        uri: 'https://sead-rails.herokuapp.com/graphql',\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        }\r\n    })\r\n\r\n    const client = new ApolloClient({\r\n        link: httpLink,\r\n        cache: new InMemoryCache()\r\n    })\r\n\r\n    useEffect(() => {\r\n        if(loading){\r\n            queryData();\r\n        }  \r\n    })\r\n\r\n    const queryData = async () =>{\r\n        const urlParams = new URLSearchParams(window.location.search);\r\n        let id = urlParams.get('id');\r\n        let data = await client\r\n            .query({\r\n                query: NOTE,\r\n                variables: {\r\n                    \"id\": id\r\n                  }\r\n            });\r\n        console.log(data);\r\n        setNote(data.data.note)\r\n        setParsedText(parseText(data.data.note.text))\r\n        setLoading(false)\r\n    }\r\n\r\n    const parseText = (text) =>{\r\n        console.log(text.split(\".\"));\r\n        return(text.split(\".\"));\r\n    }\r\n\r\n    const decreaseIndex = () =>{\r\n        console.log(index)\r\n        if(index > 0){\r\n            setIndex(index-1)\r\n        }\r\n    }\r\n\r\n    const increaseIndex = () =>{\r\n        console.log(index)\r\n        console.log(index+\":\"+parsedText.length)\r\n        if(index+1 < parsedText.length-1){\r\n            setIndex(index+1)\r\n        }\r\n    }\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"read-page\">\r\n        <div className=\"read-page-container\">\r\n            {loading ? \r\n                \"Loading...\"\r\n                : \r\n                <span className=\"read-page-text\">{parsedText[index]+\".\"}</span>\r\n            }\r\n        </div>\r\n        <div className=\"read-page-buttons\">\r\n            <input className=\"read-button\" type=\"button\" value=\"Backward\" onClick={()=>{decreaseIndex()}}></input>\r\n            <input className=\"read-button\" type=\"button\" value=\"Forward\" onClick={()=>{increaseIndex()}}></input>\r\n        </div>\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ReadPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { ApolloClient } from 'apollo-client'\r\nimport { createHttpLink } from 'apollo-link-http'\r\nimport { InMemoryCache } from 'apollo-cache-inmemory'\r\nimport {CREATENOTE} from '../apicalls'\r\nimport { Link , Redirect} from \"react-router-dom\";\r\nimport '../style/CreateNotePage.scss';\r\nconst CreateNotePage = (props) => {\r\n\r\n    let [title, setTitle] = useState(\"\");\r\n    let [text, setText] = useState(\"\");\r\n    let [redirect, setRediret] = useState(false);\r\n    let [errorDialog, setErrorDialog] = useState(false);\r\n\r\n    const httpLink = createHttpLink({\r\n        uri: 'https://sead-rails.herokuapp.com/graphql',\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        }\r\n    })\r\n\r\n    const client = new ApolloClient({\r\n        link: httpLink,\r\n        cache: new InMemoryCache()\r\n    })\r\n    \r\n    const createNote = async () =>{\r\n        if ((title == \"\") || (text == \"\")) {\r\n            setErrorDialog(true);\r\n          } else {\r\n            let data = await client\r\n              .mutate({\r\n                mutation: CREATENOTE,\r\n                variables: {\r\n                  \"userId\": props.userID,\r\n                  \"title\": title,\r\n                  \"text\": text\r\n                }\r\n              });\r\n              setRediret(true)\r\n              console.log(data);\r\n          }   \r\n    }\r\n\r\n    const renderRedirect = () => {\r\n        if (props.userID == -1) {\r\n            return (<Redirect to='/login' />)\r\n        }else{\r\n            if(redirect){\r\n                return (<Redirect to='/notes' />)  \r\n            }\r\n        }\r\n    }\r\n\r\n    const updateTitle = (event) => {\r\n        setTitle(event.target.value);\r\n    }\r\n\r\n    const updateText = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const clickLogin = () => {\r\n        console.log(title);\r\n        console.log(text); \r\n        createNote();\r\n    }\r\n\r\n    const errorDialogRender = (text) => {\r\n    if (errorDialog) {\r\n        return (\r\n        <div className=\"error-dialog\">\r\n            <p>{text}</p>\r\n        </div>\r\n        )\r\n    } else {\r\n        return (\r\n        <></>\r\n        )\r\n    }\r\n    }\r\n\r\n  return (\r\n    <>\r\n    {renderRedirect()}\r\n    <div className=\"create-note-page\">\r\n        <div className=\"create-note-page-container\">\r\n            <div className=\"create-note-page-container-inner\">\r\n                <input className=\"create-note-page-input\" type=\"text\" placeholder=\"Title\" value={title} onChange={updateTitle}></input>\r\n                <textarea className=\"create-note-page-input\" id=\"create-note-page-text\" type=\"text\" placeholder=\"Text\" value={text} onChange={updateText} ></textarea>{/*type=\"password\"*/}\r\n                <input className=\"create-note-page-button\" type=\"button\" value=\"Add\" onClick={clickLogin}></input>\r\n                \r\n            </div>  \r\n        </div>\r\n    </div>\r\n    {errorDialogRender('Invalid Entry')}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CreateNotePage;\r\n","import React from 'react';\r\nimport '../style/Header.scss';\r\nimport { Link } from \"react-router-dom\";\r\nconst Header = () => {\r\n\r\n  return (\r\n    <div className=\"header\">\r\n       <Link to={'/notes/'}><img className=\"header-logo\" src=\"https://i.imgur.com/ZrBzEFC.png\"></img></Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useState, useEffect } from 'react';\nimport './style/App.scss';\nimport {USERS} from './apicalls'\nimport { BrowserRouter as Router, Route, Redirect, Switch } from \"react-router-dom\";\nimport { ApolloProvider } from 'react-apollo'\nimport { ApolloClient } from 'apollo-client'\nimport { createHttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport LoginPage from './components/LoginPage'\nimport NotesPage from './components/NotesPage'\nimport ReadPage from './components/ReadPage'\nimport CreateNotePage from './components/CreateNotePage'\nimport Header from './components/Header'\n\nconst App = (props) => {\n\n  let [id, setId] = useState(-1);\n\n  return (\n    <div className=\"app\">\n      \n       <Router>\n          {id != -1 ? \"\" : <Redirect to=\"/login/\" />}\n          <Header/>\n          <Route path=\"/login\" component={() =><LoginPage userID={id} setUserID={setId}/>} />\n          <Route path=\"/create\" component={() =><CreateNotePage userID={id}/>} />\n          <Route path=\"/notes\" component={() =><NotesPage userID={id}/>}/>\n          <Route path=\"/read\" component={ReadPage}/>\n       </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.scss';\nimport App from './App';\n\nimport { ApolloProvider } from 'react-apollo'\nimport { ApolloClient } from 'apollo-client'\nimport { createHttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\n\nconst httpLink = createHttpLink({\n    uri: 'https://sead-rails.herokuapp.com/graphql',\n    headers: {\n        \"Content-Type\": \"application/json\",\n    }\n  })\n\nconst client = new ApolloClient({\n    link: httpLink,\n    cache: new InMemoryCache()\n})\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}